/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Vapi from "../../../index";
export declare namespace Analytics {
    interface Options {
        environment?: core.Supplier<environments.VapiEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Analytics {
    protected readonly _options: Analytics.Options;
    constructor(_options: Analytics.Options);
    /**
     * @param {Vapi.AnalyticsQueryDto} request
     * @param {Analytics.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.analytics.get({
     *         queries: [{
     *                 table: "call",
     *                 name: "name",
     *                 operations: [{
     *                         operation: "sum",
     *                         column: "id"
     *                     }]
     *             }]
     *     })
     */
    get(request: Vapi.AnalyticsQueryDto, requestOptions?: Analytics.RequestOptions): Promise<Vapi.AnalyticsQueryResult[]>;
    protected _getAuthorizationHeader(): Promise<string>;
}
