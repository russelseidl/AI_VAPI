/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Vapi from "../../../index";
export declare namespace Blocks {
    interface Options {
        environment?: core.Supplier<environments.VapiEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Blocks {
    protected readonly _options: Blocks.Options;
    constructor(_options: Blocks.Options);
    /**
     * @param {Vapi.BlocksListRequest} request
     * @param {Blocks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.blocks.list()
     */
    list(request?: Vapi.BlocksListRequest, requestOptions?: Blocks.RequestOptions): Promise<Vapi.BlocksListResponseItem[]>;
    /**
     * @param {Vapi.BlocksCreateRequest} request
     * @param {Blocks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.blocks.create({
     *         type: "conversation",
     *         instruction: "instruction"
     *     })
     */
    create(request: Vapi.BlocksCreateRequest, requestOptions?: Blocks.RequestOptions): Promise<Vapi.BlocksCreateResponse>;
    /**
     * @param {string} id
     * @param {Blocks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.blocks.get("id")
     */
    get(id: string, requestOptions?: Blocks.RequestOptions): Promise<Vapi.BlocksGetResponse>;
    /**
     * @param {string} id
     * @param {Blocks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.blocks.delete("id")
     */
    delete(id: string, requestOptions?: Blocks.RequestOptions): Promise<Vapi.BlocksDeleteResponse>;
    /**
     * @param {string} id
     * @param {Vapi.UpdateBlockDto} request
     * @param {Blocks.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.blocks.update("id")
     */
    update(id: string, request?: Vapi.UpdateBlockDto, requestOptions?: Blocks.RequestOptions): Promise<Vapi.BlocksUpdateResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
