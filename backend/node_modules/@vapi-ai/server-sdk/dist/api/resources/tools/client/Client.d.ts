/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "../../../../environments";
import * as core from "../../../../core";
import * as Vapi from "../../../index";
export declare namespace Tools {
    interface Options {
        environment?: core.Supplier<environments.VapiEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class Tools {
    protected readonly _options: Tools.Options;
    constructor(_options: Tools.Options);
    /**
     * @param {Vapi.ToolsListRequest} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tools.list()
     */
    list(request?: Vapi.ToolsListRequest, requestOptions?: Tools.RequestOptions): Promise<Vapi.ToolsListResponseItem[]>;
    /**
     * @param {Vapi.ToolsCreateRequest} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tools.create({
     *         type: "dtmf"
     *     })
     */
    create(request: Vapi.ToolsCreateRequest, requestOptions?: Tools.RequestOptions): Promise<Vapi.ToolsCreateResponse>;
    /**
     * @param {string} id
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tools.get("id")
     */
    get(id: string, requestOptions?: Tools.RequestOptions): Promise<Vapi.ToolsGetResponse>;
    /**
     * @param {string} id
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tools.delete("id")
     */
    delete(id: string, requestOptions?: Tools.RequestOptions): Promise<Vapi.ToolsDeleteResponse>;
    /**
     * @param {string} id
     * @param {Vapi.UpdateToolDto} request
     * @param {Tools.RequestOptions} requestOptions - Request-specific configuration.
     *
     * @example
     *     await client.tools.update("id")
     */
    update(id: string, request?: Vapi.UpdateToolDto, requestOptions?: Tools.RequestOptions): Promise<Vapi.ToolsUpdateResponse>;
    protected _getAuthorizationHeader(): Promise<string>;
}
