/**
 * This file was auto-generated by Fern from our API Definition.
 */
import * as environments from "./environments";
import * as core from "./core";
import { Calls } from "./api/resources/calls/client/Client";
import { Assistants } from "./api/resources/assistants/client/Client";
import { PhoneNumbers } from "./api/resources/phoneNumbers/client/Client";
import { Squads } from "./api/resources/squads/client/Client";
import { Blocks } from "./api/resources/blocks/client/Client";
import { Tools } from "./api/resources/tools/client/Client";
import { Files } from "./api/resources/files/client/Client";
import { Analytics } from "./api/resources/analytics/client/Client";
import { Logs } from "./api/resources/logs/client/Client";
export declare namespace VapiClient {
    interface Options {
        environment?: core.Supplier<environments.VapiEnvironment | string>;
        token: core.Supplier<core.BearerToken>;
        fetcher?: core.FetchFunction;
    }
    interface RequestOptions {
        /** The maximum time to wait for a response in seconds. */
        timeoutInSeconds?: number;
        /** The number of times to retry the request. Defaults to 2. */
        maxRetries?: number;
        /** A hook to abort the request. */
        abortSignal?: AbortSignal;
    }
}
export declare class VapiClient {
    protected readonly _options: VapiClient.Options;
    constructor(_options: VapiClient.Options);
    protected _calls: Calls | undefined;
    get calls(): Calls;
    protected _assistants: Assistants | undefined;
    get assistants(): Assistants;
    protected _phoneNumbers: PhoneNumbers | undefined;
    get phoneNumbers(): PhoneNumbers;
    protected _squads: Squads | undefined;
    get squads(): Squads;
    protected _blocks: Blocks | undefined;
    get blocks(): Blocks;
    protected _tools: Tools | undefined;
    get tools(): Tools;
    protected _files: Files | undefined;
    get files(): Files;
    protected _analytics: Analytics | undefined;
    get analytics(): Analytics;
    protected _logs: Logs | undefined;
    get logs(): Logs;
}
